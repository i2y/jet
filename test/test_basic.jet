module test_basic
  class Fafa
    include Enumerable

    def initialize(x, y, z)
      {x: x, y: y, z: z}
    end

    def fafa()
      3
    end

    def fafa({:x, x}, y, z)
      x - y - z
    end

    def fafa(x, y, z)
      x + y + z
    end

    def xyz()
      @x + @y + @z
    end

    def reduce(acc, func)
      # TODO
      func.(func.(func.(acc, @x), @y), @z)
    end
  end

  test
  def self.test_new()
    test::assert_eq(test_basic::Fafa.new(1, 2, 3).xyz, 6)
    test::assert_eq(test_basic::Fafa.new(1, 2, 3).min, 1)
    # test_basic::Fafa.each do |item|
    #   item.display
    # end
  end

  test
  def self.if_stmt()
    value = if true
      100
    else
      200
    end
    test::assert_eq(value, 100)
  end

  test
  def self.if_stmt_else()
    value = if false
      100
    else
      200
    end
    test::assert_eq(value, 200)
  end

  test
  def self.if_stmt_single()
    value = if true
      200
    end
    test::assert_eq(value, 200)
    [1, 2, 3].each do |item| item.display() end
  end

  test
  def self.tuple()
    {1, 2, 3}.size()
  end

  test
  def self.method()
    "aiueo".to_tuple().display()
  end

  test
  def self.times()
    10.times do
      :a.display
    end

    10.times do |i|
      i.display
    end
  end

  test
  def self.bench_call_func()
    _start = erlang::monotonic_time(:nano_seconds)
    now()
    _end = erlang::monotonic_time(:nano_seconds)
    # timer::now_diff(_end, _start)
    erlang::convert_time_unit(_end - _start, :native, :nano_seconds)
    # {_end, _start}
  end

  class N2
    def initialize()
      {}
    end

    def test()
      :ok # erlang::now()
    end

    def self.fafa()
      10000
    end

    def method_missing(method_name, args)
      [method_name, args]
    end
  end

  class N2Actor
    meta Actor
    def initialize()
      erlang::put(:x, 3)
    end

    def test()
      # erlang::get(:x)
      erlang::now()
    end
  end

  class N3Actor
    meta Actor
    def initialize()
      erlang::put(:x, 3)
    end

    def test()
      # erlang::get(:x)
      erlang::now()
    end
  end

  class List
    include Enumerable

    def initialize(list)
      {list: list}
    end

    def reduce(acc, func)
      lists::foldl(func, acc, @list)
    end
  end

  test
  def self.user_list()
    obj = test_basic::List.new([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
    _start = now()
    obj.each do |item|
      item + 1
    end
    _end = now()
    timer::now_diff(_end, _start)
  end

  test
  def self.user_list2()
    obj = test_basic::List.new([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
    _start = now()
    obj.each do |item|
      item + 1
    end
    _end = now()
    timer::now_diff(_end, _start)
  end

  test
  def self.list()
    obj = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    _start = now()
    obj.each {|item| item + 1}
    _end = now()
    timer::now_diff(_end, _start)
  end
end