module TaskBase
  def pipe_to(next_task)
    update_task_list(@task_list.append(next_task))
  end

  def run()
    reversed_task_list = @task_list.reverse().append(self)
    reversed_task_list.reduce([]) do |task, acc|
      next_actor = if acc == []
        self()
      else
        acc
      end
      task.spawn_actor(next_actor)
    end
    reversed_task_list.first()
  end

  def get()
    get([])
  end

  def get(filter) if is_function(filter)
    get([], filter)
  end

  def get(acc) if is_list(acc)
    receive
      case :eos
        acc.reverse()
      case value
        get([value, *acc])
    end
  end

  def get(acc, filter)
    receive
      case :eos
        acc.reverse()
      case value
        if filter.(value)
          get([value, *acc])
        else
          get(acc, filter)
        end
    end
  end
  def get()
    receive
      case :eos
        :eos
      case value
        value
    end
  end

  def get(filter) if is_function(filter)
    receive
      case :eos
        :eos
      case value
        if filter.(value)
          value
        else
          :pass
        end
    end
  end

  def get_all(acc) if is_list(acc)
    receive
      case :eos
        acc.reverse()
      case value
        get([value, *acc])
    end
  end

  def get(acc, filter)
    receive
      case :eos
        acc.reverse()
      case value
        if filter.(value)
          get([value, *acc])
        else
          get(acc, filter)
        end
    end
  end

  protocol
  def spawn_actor(next_actor)
    nil
  end

  protocol
  def update_task_list(task_list)
    nil
  end

  def to_task()
    self
  end
end