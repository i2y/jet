module uiro_list
  include Enumerable

  def reduce(acc, func)
    lists::foldl(func, acc, self)
  end

  def each(func)
    lists::foreach(func, self)
  end

  def index_of(item)
    index_of(item, self, 1)
  end

  def self.index_of(_, [], _)
    false
  end

  def self.index_of(item, [item, *_], index)
    index
  end

  def self.index_of(item, [_, *tl], index)
    index_of(item, tl, index + 1)
  end

  def add(item)
    self ++ [item]
  end

  def append(item)
    self ++ [item]
  end

  def conj(item)
    [item, *self]
  end

  def add_all(lis)
    self ++ lis
  end

  def extend(lis)
    self ++ lis
  end

  def to_list()
    self
  end

  def to_tuple()
    erlang::list_to_tuple(self)
  end

  def to_binary()
    erlang::list_to_binary(self)
  end

  def drop_last()
    lists::droplast(self)
  end

  def drop_while(func)
    lists::dropwhile(func, self)
  end

  def first()
    [head, *_] = self
    head
  end

  def last()
    lists::last(self)
  end

  def member?(elem)
    lists::member(elem, self)
  end

  def nth(n)
    lists::nth(n, self)
  end

  def nth_tail(n)
    lists::nthtail(n, self)
  end

  def reverse()
    lists::reverse(self)
  end

  def pipe_to(other)
    new Seq(self).pipe_to(other)
  end

  def size()
    erlang::length(self)
  end

  def length()
    erlang::length(self)
  end

  def send_to(actor)
    each do |item|
      actor ! item
    end
  end

  def sum()
    lists::sum(self)
  end
end