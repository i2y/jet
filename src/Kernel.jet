module Kernel
  def display()
    {_, _, state} = self
    io::format("~p~n", [state])
  end

  def send_to(actor)
    actor ! self
  end

  def spawn(f)
    erlang::spawn(f)
  end

  def spawn(n, f)
    erlang::spawn(n, f)
  end

  def spawn(m, f, a)
    erlang::spawn(m, f, a)
  end

  def spawn(n, m, f, a)
    erlang::spawn(n, m, f, a)
  end

  def self()
    erlang::self()
  end

  def apply(f, a)
    erlang::apply(f, a)
  end

  def apply(m, f, a)
    erlang::apply(m, f, a)
  end

  def update_state(key, value)
    {:object, module_name, state} = self
    {:object, module_name, state.update(key, value)}
  end

  def put_state(key, value)
    {:object, module_name, state} = self
    {:object, module_name, state.put(key, value)}
  end

  def merge_state(new_state)
    {:object, module_name, state} = self
    {:object, module_name, state.merge(new_state)}
  end

  def clone()
    {:object, module_name, state} = self
    {:object, module_name, state}
  end

  def clone(new_state)
    {:object, module_name, state} = self
    {:object, module_name, state.merge(new_state)}
  end

  def cast() if is_pid(self)
    Kernel::Caster.new(self)
  end

  def stop() if is_pid(self)
    gen_server::stop(self)
  end

  def stop(reason, timeout) if is_pid(self)
    gen_server::stop(self, reason, timeout)
  end

  class Future
    def initialize(result_of_async_call)
      {key: result_of_async_call}
    end

    def await()
      rpc::yield(@key)
    end

    def await(timeout)
      rpc::nb_yield(@key, timeout)
    end
  end

  class Caster
    def initialize(instance_of_gen_server)
      {pid: instance_of_gen_server}
    end

    def method_missing(method_name, args)
      gen_server::cast(@pid, {method_name, args})
    end

    def stop()
      gen_server::stop(@pid)
    end

    def stop(reason, timeout)
      gen_server::stop(@pid, reason, timeout)
    end
  end

  def async() if is_pid(self)
    Kernel::AsyncCaller.new(self)
  end

  class AsyncCaller
    def initialize(instance_of_gen_server)
      {pid: instance_of_gen_server}
    end

    def method_missing(method_name, args)
      Kernel::Future.new(rpc::async_call(erlang::node(), :jet_runtime, :call_method, [@pid, method_name, args]))
    end

    def stop()
      gen_server::stop(@pid)
    end

    def stop(reason, timeout)
      gen_server::stop(@pid, reason, timeout)
    end
  end
end