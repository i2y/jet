module Task
  def self.p_map(func)
    new PMap(func)
  end

  def self.p_flat_map(func)
    new PFlatMap(func)
  end

  def self.p_each(func)
    new PEach(func)
  end

  def self.p_filter(func)
    new PFilter(func)
  end

  def self.map(func)
    new Map(func)
  end

  def self.flat_map(func)
    new FlatMap(func)
  end

  def self.call(func)
    new Call(func)
  end

  def self.reduce(acc, func)
    new Reduce(acc, func)
  end

  def self.reduce_by_key(func)
    new ReduceByKey(func)
  end

  def self.group_by(func)
    new Reduce({}) do |acc, value|
      key = func.(value)
      values = acc.get(key, [])
      acc.put(key, [value, *values])
    end
  end

  def self.flat()
    new FlatMap do |item|
      item.to_list
    end
  end

  def self.p_flat()
    new PFLatMap do |item|
      item.to_list
    end
  end

  def self.filter(func)
    new Filter(func)
  end

  def self.split(func)
    new Split(func)
  end

  def self.to_list(func)
    new ToList(func)
  end
end