module jet_map
  class Hash
    include Enumerable

    def initialize(map)
      {map: map}
    end

    def reduce(acc, func)
      lists::foldl(func, acc, maps::values(@map))
    end

    def is_key?(key)
      maps::is_key(key, @map)
    end

    def keys()
      maps::keys(@map)
    end

    def values()
      maps::values(@map)
    end

    def map_item(func)
      maps::map(func, @map)
    end

    def merge(other)
      maps::marge(self, @map)
    end

    def put(key, value)
      maps::put(key, value, @map)
    end

    def get(key, default_value)
      maps::get(key, @map, default_value)
    end

    def get(key)
      maps::get(key, @map)
    end

    def remove(key)
      maps::remove(key, @map)
    end

    def size()
      maps::size(@map)
    end

    def to_list()
      maps::to_list(@map)
    end

    def update(key, value)
      maps::update(key, value, @map)
    end

    def values()
      maps::values(@map)
    end

    def with(keys)
      maps::with(keys, @map)
    end

    def without(keys)
      maps::without(keys, @map)
    end

    def display()
      io::format("~p~n", [@map])
    end
  end
end
