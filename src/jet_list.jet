module jet_list
  def self.index_of(_, [], _)
    false
  end

  def self.index_of(item, [item, *_], index)
    index
  end

  def self.index_of(item, [_, *tl], index)
    index_of(item, tl, index + 1)
  end

  class List
    include Enumerable

    def initialize(list)
      {list: list}
    end

    def reduce(acc, func)
      lists::foldl(func, acc, @list)
    end

    def each(func)
      lists::foreach(func, @list)
    end

    def index_of(item)
      jet_list::index_of(item, @list, 1)
    end

    def add(item)
      @list ++ [item]
    end

    def append(item)
      @list ++ [item]
    end

    def conj(item)
      [item, *@list]
    end

    def add_all(lis)
      @list ++ lis
    end

    def extend(lis)
      @list ++ lis
    end

    def to_list()
      @list
    end

    def to_tuple()
      erlang::list_to_tuple(@list)
    end

    def to_binary()
      erlang::list_to_binary(@list)
    end

    def drop_last()
      lists::droplast(@list)
    end

    def drop_while(func)
      lists::dropwhile(func, @list)
    end

    def first()
      [head, *_] = @list
      head
    end

    def last()
      lists::last(@list)
    end

    def member?(elem)
      lists::member(elem, @list)
    end

    def nth(n)
      lists::nth(n, @list)
    end

    def nth_tail(n)
      lists::nthtail(n, @list)
    end

    def reverse()
      lists::reverse(@list)
    end

    def size()
      erlang::length(@list)
    end

    def length()
      erlang::length(@list)
    end

    def sum()
      lists::sum(@list)
    end

    def display()
      io::format("~p~n", [@list])
    end
  end
end
