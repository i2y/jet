class Reduce
  include TaskBase

  def initialize(acc, func)
    {acc: acc,
     func: func,
     task_list: []}
  end

  def initialize(acc, func, task_list)
    {acc: acc,
     func: func,
     task_list: task_list}
  end

  def self.reduce(next_actor, func, acc)
    receive
      case :eos
        next_actor ! acc
        next_actor ! :eos
      case value
        new_acc = func.(acc, value)
        reduce(next_actor, func, new_acc)
    end
  end

  def spawn_actor(next_actor)
    spawn(__name__, :reduce, [next_actor, @func, @acc])
  end

  def update_task_list(task_list)
    new Reduce(@func, task_list)
  end
end