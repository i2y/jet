module Kernel
  def display()
    io::format("~p~n", [self])
  end

  def send_to(actor)
    actor ! self
  end

  def class_obj()
    {:object, module_name, _} = self
    new Class(module_name)
  end

  def class_info(info_type)
    {:object, module_name, _} = self
    apply(module_name, :module_info, [info_type])
  end

  def class_info()
    {:object, module_name, _} = self
    apply(module_name, :module_info, [])
  end

  def class_attrs()
    {:object, module_name, _} = self
    apply(module_name, :module_info, [:attributes])
  end

  def class_attr_values(attribute_name)
    proplists::get_all_values(attribute_name, class_attrs())
  end

  def spawn(f)
    erlang::spawn(f)
  end

  def spawn(n, f)
    erlang::spawn(n, f)
  end

  def spawn(m, f, a)
    erlang::spawn(m, f, a)
  end

  def spawn(n, m, f, a)
    erlang::spawn(n, m, f, a)
  end

  def self()
    erlang::self()
  end

  def apply(f, a)
    erlang::apply(f, a)
  end

  def apply(m, f, a)
    erlang::apply(m, f, a)
  end

  def update_state(key, value)
    {:object, module_name, state} = self
    {:object, module_name, state.update(key, value)}
  end

  def put_state(key, value)
    {:object, module_name, state} = self
    {:object, module_name, state.put(key, value)}
  end

  def merge_state(new_state)
    {:object, module_name, state} = self
    {:object, module_name, state.merge(new_state)}
  end
end